import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from streamlit_option_menu import option_menu
from datetime import datetime


# Obtener la fecha actual en espa√±ol
meses = [
    "enero", "febrero", "marzo", "abril", "mayo", "junio",
    "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"
]

dias_semana = [
    "lunes", "martes", "mi√©rcoles", "jueves", "viernes", "s√°bado", "domingo"
]

now = datetime.now()
current_date = f"{dias_semana[now.weekday()]}, {now.day} de {meses[now.month - 1]} de {now.year}"


# Mostrar la fecha en la barra lateral
st.sidebar.title(f'üìÖ Fecha:')
st.sidebar.markdown(
    f'<h2 style="color: #333;">{current_date}</h2>',
    unsafe_allow_html=True
)

# Cambiar el fondo de color del sidebar
st.markdown(
    """
    <style>
    .sidebar .sidebar-content {
        background-color: #000;
    }
    </style>
    """,
    unsafe_allow_html=True
)
# Separar con l√≠nea horizontal
st.sidebar.markdown("<hr>", unsafe_allow_html=True)

# Configuraci√≥n del men√∫ principal en la barra lateral
from streamlit_option_menu import option_menu
import streamlit as st

# Configuraci√≥n del men√∫ principal en la barra lateral
with st.sidebar:
    selected = option_menu(
        menu_title='Men√∫ Principal',
        options=[
            'Principal', 
            'Sistema de Detecci√≥n de Fraude', 
            'Transacciones', 
            'An√°lisis Monto', 
            'An√°lisis Tiempo', 
            'An√°lisis Edad', 
            'An√°lisis Trabajo', 
            'An√°lisis Sexo', 
            'An√°lisis Ubicaci√≥n',
            'An√°lisis Categor√≠as'
        ],
        menu_icon='gear',
        icons=[
            'house',               # Icono para "Principal"
            'search',              # Icono para "Sistema de Detecci√≥n de Fraude" (lupa)
            'file-earmark-text',   # Icono para "Transacciones"
            'cash-stack',          # Icono para "An√°lisis Monto" (dinero)
            'clock',               # Icono para "An√°lisis Tiempo"
            'calendar',            # Icono para "An√°lisis Edad"
            'person',              # Icono para "An√°lisis Trabajo"
            'gender-ambiguous',    # Icono para "An√°lisis Sexo"
            'map',                 # Icono para "An√°lisis Ubicaci√≥n"
            'grid'                 # Icono para "An√°lisis Categor√≠as"
        ],
        default_index=0,
        orientation='vertical',
        styles={
            "container": {"padding": "0!important", "background-color": "#fafafa"},
            "icon": {"color": "red", "font-size": "16px"},
            "nav-link": {
                "font-size": "14px", 
                "text-align": "left", 
                "margin": "0px", 
                "--hover-color": "#eee"
            },
            "nav-link-selected": {"background-color": "lightblue"},
        }
    )


# Funci√≥n para cargar el DataFrame de vencimientos desde un archivo Parquet
def cargar_df():
    try:
        # Leer archivo Parquet
        df = pd.read_parquet('credit_card_transactions.parquet')
        
        # Eliminar la columna 'Unnamed: 0' si existe
        if 'Unnamed: 0' in df.columns:
            df = df.drop(columns=['Unnamed: 0'])
        
        return df
    except FileNotFoundError:
        # Mostrar un mensaje de error en Streamlit si el archivo no se encuentra
        st.error("El archivo 'credit_card_transactions.parquet' no se encontr√≥.")
        return None  # Retornar None para indicar que no se pudo cargar el DataFrame

###########################################################################################################


# Mostrar contenido espec√≠fico seg√∫n la opci√≥n seleccionada
if selected == 'Principal':
    st.title("Proyecto Fintech:")
    st.image('phishing-bancario.jpg')
    
    '''## **Detecci√≥n de Fraudes con Tarjetas de Cr√©ditos:**'''
    
    st.markdown(
        """
    Esta aplicaci√≥n te permite identificar posibles transacciones fraudulentas en tiempo real mediante un sistema avanzado de detecci√≥n de fraudes basado en machine learning.

    Con nuestra app, podr√°s:

    - **Visualizar los datos:** Accede a un conjunto de transacciones, organizadas en tablas f√°ciles de interpretar, donde podr√°s explorar los detalles clave de cada operaci√≥n.
    - **An√°lisis gr√°fico:** Descubre patrones y anomal√≠as mediante gr√°ficos interactivos que te mostrar√°n las tendencias y comportamientos sospechosos en las transacciones.
    - **Predicciones de fraude:** Obt√©n alertas sobre posibles transacciones fraudulentas basadas en el an√°lisis de datos hist√≥ricos y comportamientos an√≥malos.
    
    Esta herramienta est√° dise√±ada para ofrecerte una visi√≥n clara y detallada de la seguridad en las transacciones financieras, ayud√°ndote a prevenir fraudes.""")


############################################################################################################


if selected == 'Sistema de Detecci√≥n de Fraude':
    
    # T√≠tulo de la aplicaci√≥n
    st.title("Sistema de Detecci√≥n de Fraude üîç")
    # st.image('')
    st.write('\n')
   


########################################################################################################################   
    
elif selected == 'Transacciones':
    # T√≠tulo de la aplicaci√≥n
    st.title("Transacciones üìà")
    st.write('\n')
    
    st.subheader('Visualizar el Dataframe:', help=None)
    st.write('El Dataframe posee 13 paginas para visualizar:')
    
    # Cargar el DataFrame
    df = cargar_df()

    # Definir el tama√±o de p√°gina (cantidad de filas a mostrar)
    page_size = 100000

    # Verificamos de que el DataFrame no est√© vac√≠o antes de calcular el n√∫mero m√°ximo de p√°ginas
    if not df.empty:
        # Calcular el n√∫mero m√°ximo de p√°ginas
        max_pages = (len(df) // page_size) + 1  
        page_number = st.number_input('Selecciona la p√°gina', min_value=1, max_value=max_pages, step=1)

        # Mostrar solo los datos correspondientes a la p√°gina seleccionada
        start_idx = (page_number - 1) * page_size
        end_idx = start_idx + page_size
        st.dataframe(df.iloc[start_idx:end_idx])
    else:
        st.write("No hay datos disponibles para mostrar.")

    st.write('---')
    st.markdown('## **Diccionario:**')
    st.markdown(' **Descripci√≥n de las columnas del DataFrame:**')
    st.markdown( """     
        1. **trans_date_trans_time:** Marca de tiempo de la transacci√≥n (fecha y hora en que ocurri√≥ la transacci√≥n).  
        2. **cc_num:** N√∫mero de la tarjeta de cr√©dito (hash o anonimizado).  
        3. **merchant:** Comerciante o tienda donde ocurri√≥ la transacci√≥n.  
        4. **category:** Tipo de transacci√≥n (ej. supermercado, entretenimiento).  
        5. **amt:** Monto de la transacci√≥n.  
        6. **first:** Nombre del titular de la tarjeta.  
        7. **last:** Apellido del titular de la tarjeta.  
        8. **gender:** G√©nero del titular de la tarjeta.  
        9. **street:** Detalles de la direcci√≥n del titular de la tarjeta.  
        10. **city:** Ciudad donde reside el titular de la tarjeta.  
        11. **state:** Estado donde reside el titular de la tarjeta.  
        12. **zip:** C√≥digo postal del titular de la tarjeta.  
        13. **lat:** Latitud de la direcci√≥n del titular de la tarjeta.  
        14. **long:** Longitud de la direcci√≥n del titular de la tarjeta.  
        15. **city_pop:** Poblaci√≥n de la ciudad del titular de la tarjeta.  
        16. **job:** Ocupaci√≥n o profesi√≥n del titular de la tarjeta.  
        17. **dob:** Fecha de nacimiento del titular de la tarjeta.  
        18. **trans_num:** Identificador √∫nico de la transacci√≥n.  
        19. **unix_time:** Marca de tiempo de la transacci√≥n en Unix (segundos desde la √©poca Unix, √∫til para c√°lculos de tiempo).  
        20. **merch_lat:** Latitud de la ubicaci√≥n del comerciante.  
        21. **merch_long:** Longitud de la ubicaci√≥n del comerciante.  
        22. **is_fraud:** Indicador de si la transacci√≥n fue fraudulenta (1 para fraudulenta, 0 para no fraudulenta).  
        23. **merch_zipcode:** C√≥digo postal del comerciante."""
    )
    st.write('---')
    st.subheader('Podes descargar el Dataframe desde:', help=None)
    st.link_button("Ir a Kaggle", "https://www.kaggle.com/datasets/priyamchoksi/credit-card-transactions-dataset")
    
#############################################################################################################

elif selected == 'An√°lisis Monto':

    # T√≠tulo de la aplicaci√≥n
    st.title("An√°lisis Monto üí∞")
    # st.image('')
    st.write('\n')
    # st.subheader('Selecciona una Opci√≥n', help=None)

    
#########################################################################################################

elif selected == 'An√°lisis Tiempo':
    # T√≠tulo de la aplicaci√≥n
    st.title("An√°lisis Tiempo  ‚è∞")    
    # st.image('')
    st.write('\n')
    # st.subheader('Selecciona una Opcion', help=None)  

                  
#########################################################################################################

elif selected == 'An√°lisis Edad':
    
    # T√≠tulo de la aplicaci√≥n
    st.title("An√°lisis Edadüë∂üë¥")
    # st.image('')
    st.write("\n")
    st.subheader('Selecciona una Opcion')
         
                    
                    
#####################################################################################################   

elif selected == 'An√°lisis Trabajo':
    
    # T√≠tulo de la aplicaci√≥n
    st.title("An√°lisis Trabajo üíº")
    # st.image('')
    st.write('\n')   
    st.subheader('Selecciona una Opcion', help=None)
    
    
   

    
########################################################################################################################   
    
elif selected == 'An√°lisis Sexo':
    
            
    # T√≠tulo de la aplicaci√≥n
    st.title("An√°lisis Sexo ‚öß")
    # st.image('')
    st.write('\n')
    st.subheader('Selecciona una Opcion', help=None) 
    
    
########################################################################################################################   
    
elif selected == 'An√°lisis Ubicaci√≥n':
    
    
    # T√≠tulo de la aplicaci√≥n
    st.title("An√°lisis Ubicaci√≥n üìç")
    # st.image('')
    st.write('\n')
    st.subheader('Selecciona una Opcion', help=None) 
    
########################################################################################################################   
    
elif selected == 'An√°lisis Categor√≠as':
        
    # T√≠tulo de la aplicaci√≥n
    st.title("An√°lisis Categor√≠as üìä")
    # st.image('')
    st.write('\n')
    st.subheader('Selecciona una Opcion', help=None) 